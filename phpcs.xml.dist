<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/squizlabs/php_codesniffer/phpcs.xsd">

    <arg name="basepath" value="."/>
    <arg name="extensions" value="php"/>
    <arg name="colors"/>
    <arg value="p"/>
    <arg value="s"/>

    <file>app</file>
    <file>bin</file>
    <file>src</file>
    <file>tests</file>

    <!-- PSR-12 coding standard -->
    <rule ref="PSR12"/>

    <!-- Short array syntax must be used to define arrays -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Control Structures must have at least one statement inside of the body -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>

    <!-- If statements that are always evaluated should not be used -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <!-- Methods should not be declared final inside of classes that are declared final -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Byte Order Marks that may corrupt your application should not be used -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- Files that contain php code should not have any inline html -->
    <rule ref="Generic.Files.InlineHTML"/>

    <!-- Spaces are not allowed after casting operators -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>

    <!-- Exactly one space is allowed after the NOT operator -->
    <rule ref="Generic.Formatting.SpaceAfterNot">
        <properties>
            <property name="spacing" value="0"/>
        </properties>
    </rule>

    <!-- Disallows the use of the backtick operator for execution of shell commands -->
    <rule ref="Generic.PHP.BacktickOperator"/>

    <!-- Deprecated functions should not be used -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Always use <?php ?> to delimit PHP code, not the <? ?> shorthand -->
    <rule ref="Generic.PHP.DisallowShortOpenTag">
        <exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>
    </rule>

    <!-- Discourage the use of the PHP goto language construct -->
    <rule ref="Generic.PHP.DiscourageGoto"/>

    <!-- The PHP_SAPI constant should be used instead of php_sapi_name() -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Strings should not be concatenated together (if not stored in variables) -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!-- Ensures that the ++ operator is used when possible -->
    <rule ref="Squiz.Operators.IncrementDecrementUsage"/>

    <!-- Disallows implicit array creation -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>

    <!-- Array must have keys specified for either all or none of the values -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowPartiallyKeyed"/>

    <!-- Enforces reasonable end bracket placement for multi-line arrays -->
    <rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement"/>

    <!-- Checks whitespace in single line array declarations -->
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace">
        <properties>
            <property name="enableEmptyArrayCheck" value="true"/>
        </properties>
    </rule>

    <!-- This sniff enforces trailing commas in multi-line arrays -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Disallows $object->{'foo'} when the property name is compatible with identifier access -->
    <rule ref="SlevomatCodingStandard.Classes.DisallowStringExpressionPropertyFetch"/>

    <!-- Disallows using public properties -->
    <rule ref="SlevomatCodingStandard.Classes.ForbiddenPublicProperty"/>

    <!-- Checks that there is exactly one blank line between different class members -->
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing"/>

    <!-- Checks that there is a certain number of blank lines between constants -->
    <rule ref="SlevomatCodingStandard.Classes.ConstantSpacing"/>

    <!-- Checks that there is exactly one blank line between class methods -->
    <rule ref="SlevomatCodingStandard.Classes.MethodSpacing"/>

    <!-- Checks that there is a certain number of blank lines between properties -->
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing"/>

    <!-- Requires use of constructor property promotion -->
    <rule ref="SlevomatCodingStandard.Classes.RequireConstructorPropertyPromotion"/>

    <!-- SlevomatCodingStandard.Classes.RequireSelfReference -->
    <rule ref="SlevomatCodingStandard.Classes.RequireSelfReference"/>

    <!-- Enforces configurable number of lines before first use, after last use and between two use statements -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUseWhenFirstInClass" value="0"/>
            <property name="linesCountAfterLastUseWhenLastInClass" value="0"/>
        </properties>
    </rule>

    <!-- Expected PHPDoc format -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBeforeFirstContent" value="0"/>
            <property name="linesCountAfterLastContent" value="0"/>
            <property name="linesCountBetweenDescriptionAndAnnotations" value="1"/>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="annotationsGroups" type="array">
                <element value="@inheritdoc"/>
                <element value="@internal,@deprecated,@var,@param,@return,@throws"/>
            </property>
        </properties>
    </rule>

    <!-- Reports invalid inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
        <properties>
            <property name="allowDocCommentAboveReturn" value="true"/>
        </properties>
    </rule>

    <!-- Forbidden PHPDoc annotations -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@subpackage"/>
                <element value="@version"/>
                <element value="@expectedException"/>
                <element value="@expectedExceptionCode"/>
                <element value="@expectedExceptionMessage"/>
                <element value="@expectedExceptionMessageRegExp"/>
            </property>
        </properties>
    </rule>

    <!-- Reports empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>

    <!-- Checks for useless doc comments -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment"/>

    <!-- Reports documentation comments containing only @inheritdoc annotation -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>

    <!-- Disallows assignments in if, elseif and do-while loop conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>

    <!-- Disallows use of empty() -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty"/>

    <!-- Yoda conditions decrease code comprehensibility and readability -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- Requires use of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

    <!-- Requires use of ??= operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator"/>

    <!-- Requires use of ?-> operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullSafeObjectOperator"/>

    <!-- Requires ternary operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator"/>

    <!-- Requires short ternary operator ?: when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

    <!-- Reports useless conditions where both branches return true or false -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>

    <!-- Reports useless ternary operator where both branches return true/false. Instead, use "(bool) $a" or "!$a" -->
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>

    <!-- This sniff finds unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- This sniff enforces that catch statements contain Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!-- Checks arrow function declaration -->
    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration"/>

    <!-- Reports empty functions body and requires at least a comment inside -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowEmptyFunction"/>

    <!-- This sniff disallows usage of named arguments -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowNamedArguments"/>

    <!-- This sniff disallows trailing commas in multi-line calls -->
    <rule ref="SlevomatCodingStandard.Functions.DisallowTrailingCommaInCall"/>

    <!-- This sniff enforces trailing commas in multi-line closure use declarations -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse"/>

    <!-- This sniff enforces trailing commas in multi-line function declarations -->
    <rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration"/>

    <!-- This sniff reports calls to functions without the $strict parameter or with $strict = false -->
    <rule ref="SlevomatCodingStandard.Functions.StrictCall"/>

    <!-- Looks for unused inherited variables passed to closure via use -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>

    <!-- Checks whether uses at the top of a file are alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

    <!-- Requires importing classes (but not functions/constants) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Requires only one namespace in a file -->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile"/>

    <!-- Looks for unused imports from other namespaces -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>

    <!-- Looks for use alias that is same as unqualified name -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>

    <!-- Disallows direct call of __invoke() -->
    <rule ref="SlevomatCodingStandard.PHP.DisallowDirectMagicInvokeCall"/>

    <!-- Enforces using short form of list syntax -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>

    <!-- Enforces using shorthand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>

    <!-- Looks for useless parentheses -->
    <rule ref="SlevomatCodingStandard.PHP.UselessParentheses"/>

    <!-- Looks for useless semicolons -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>

    <!-- Disallows using loose `==` and `!=` comparison operators. Use `===` and `!==` instead -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Disallows spaces after negation operator -->
    <rule ref="SlevomatCodingStandard.Operators.NegationOperatorSpacing"/>

    <!-- Requires using combined assignment operators, eg +=, .= -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>

    <!-- Enforces having declare(strict_types=1) at the top of each PHP file -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="declareOnFirstLine" value="false"/>
            <property name="linesCountBeforeDeclare" value="1"/>
            <property name="linesCountAfterDeclare" value="1"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <!-- Enforces using shorthand scalar typehints -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>

    <!-- Enforces null type hint on last position in annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>

    <!-- Checks whether the nullablity ? symbol is present before each nullable and optional parameter -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Checks for missing property typehints -->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.PropertyTypeHint.MissingTraversableTypeHintSpecification"/>
    </rule>

    <!-- Checks for missing parameter typehints -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.MissingTraversableTypeHintSpecification"/>
    </rule>

    <!-- Checks for missing return typehints -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
        <exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.MissingTraversableTypeHintSpecification"/>
    </rule>

    <!-- Checks format of DNF type hints (only enabled if php >= 8.0) -->
    <rule ref="SlevomatCodingStandard.TypeHints.DNFTypeHintFormat">
        <properties>
            <property name="withSpacesAroundOperators" value="no"/>
            <property name="shortNullable" value="yes"/>
            <property name="nullPosition" value="last"/>
        </properties>
    </rule>

    <!-- Reports useless @var annotation for constants because the type of constant is always clear -->
    <rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint"/>

    <!-- Disallows use of super global variables -->
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable"/>

    <!-- Looks for duplicate assignments to a variable -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>

    <!-- Looks for unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/>

    <!-- Looks for useless variables -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>

    <!-- Checks duplicate spaces anywhere because there aren't sniffs for every part of code to check formatting -->
    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces"/>
</ruleset>
